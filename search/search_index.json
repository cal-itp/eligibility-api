{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This website provides technical documentation for the <code>eligibility-api</code> package from the California Integrated Travel Project (Cal-ITP).</p> <p>Documentation for the <code>main</code> (default) branch is available online.</p>"},{"location":"#overview","title":"Overview","text":"<p><code>eligibility-api</code> is a Python package that encapsulates the data exchange needed to verify one or more eligibility criteria for transit benefits.</p> <p>The API is designed for privacy and security of user information:</p> <ul> <li>The API communicates with signed and encrypted JSON Web Tokens containing only the most necessary of user data for the purpose of eligibility verification</li> </ul>"},{"location":"getting-started/","title":"Getting started","text":"<p>The following commands should be run in a terminal program like <code>bash</code>.</p>"},{"location":"getting-started/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/cal-itp/eligibility-api.git\n</code></pre>"},{"location":"getting-started/#develop-with-vs-code-remote-containers","title":"Develop with VS Code Remote Containers","text":"<p>This repository comes with a VS Code Remote Containers configuration file.</p> <p>Once you clone the repository locally, simply open it within VS Code, which will prompt you to re-open the repository within the Remote Container.</p>"},{"location":"getting-started/#run-and-develop-the-documentation","title":"Run and develop the Documentation","text":"<p>When running the Devcontainer, the server is automatically started.</p> <p>Otherwise, manually start the docs container with</p> <pre><code>docker compose up docs\n</code></pre> <p>The site is served from <code>http://localhost</code> at a port dynamically assigned by Docker. See Docker dynamic ports for more information.</p> <p>The website is automatically rebuilt as changes are made to <code>docs/</code> files.</p> <p>Read more on how to run and develop the docs locally.</p>"},{"location":"specification/","title":"API Specification","text":"<p>This document outlines the requirements for data exchange to verify one or more eligibility criteria for transit benefits.</p>"},{"location":"specification/#security","title":"Security","text":""},{"location":"specification/#actors","title":"Actors","text":"<ul> <li>The API Client communicates with an API Server on behalf of a user. The Client makes Requests.</li> <li>An API Server holds information enabling fulfillment of an eligibility verification transaction. The Server sends   Responses</li> </ul> <p>Under these definitions, the <code>benefits</code> application acts as the Client and communicates with the Server, the <code>eligibility-server</code> application.</p>"},{"location":"specification/#authenticationauthorization","title":"Authentication/Authorization","text":"<p>The Server must be secured and allow only authorized Clients to make requests. API requests are secured via client secrets sent with the HTTP headers.</p>"},{"location":"specification/#transport","title":"Transport","text":"<p>All API requests and responses must be made over an encrypted HTTPS connection utilizing TLS 1.2 or higher.</p> <p>This API uses a data interchange format known as JSON Web Token (JWT); JWT is an open industry standard method of representing claims securely between two parties. Built into JWT are important protections for data integrity and data source verification.</p>"},{"location":"specification/#message-signing","title":"Message signing","text":"<p>JWT is designed to use a digital signature, allowing the Server to verify that data received was not modified by a third-party after being sent by the Client. Request and response payloads must be signed with public-key cryptography, which allows the recipient to validate that the payload came from a known sender.</p> <p>Signing algorithms supporting public-key cryptography include the RSA family (e.g. RSA-256) and ECDSA.</p>"},{"location":"specification/#message-encryption","title":"Message encryption","text":"<p>The Request JWT must be encrypted by the Client before sending, using a public key published by the Server. The Server\u2019s Response JWT must also be encrypted, using a public key published by the Client.</p>"},{"location":"specification/#composing-a-message","title":"Composing a message","text":"<p>Based on connect2id Nested signed and encrypted JSON Web Token (JWT).</p> <ol> <li>Build JWT header and (request/response) payload (See API documentation)</li> <li>Generate signature for JWT using the sender\u2019s private key</li> <li>Put header, claims, and signature together into a Signed JWT (JWS)</li> <li>Encrypt JWS using the recipient\u2019s public key (JWE)</li> <li>Base64url-encode JWE</li> <li>JWE is sent with (request/response)</li> </ol>"},{"location":"specification/#parsing-the-token","title":"Parsing the token","text":"<p>Reverse the steps in Composing a message.</p> <ol> <li>Decrypt JWE using recipient\u2019s private key (JWS)</li> <li>Verify the signature on the Signed JWT using sender\u2019s public key (JWS)</li> <li>JWT contains the header and claims payload</li> </ol>"},{"location":"specification/#api-documentation","title":"API Documentation","text":"<p>Below is a description of the HTTP request and response, and request and response payloads. The payloads each make use of JWT Registered claims as well as Private claims.</p> <p>All fields are required. Fields names marked with * are Registered claims defined by the JWT specification.</p> <p>Complete example transactions can be found on another page.</p>"},{"location":"specification/#header","title":"Header","text":"<p>The same header is shared between Request and Response JWTs.</p> Field name Data type Notes <code>alg</code>* <code>string</code> The signature algorithm <code>enc</code>* <code>string</code> The encryption algorithm <code>typ</code>* <code>string</code> The type of token; must equal \u201cJWT\u201d <p>Header example:</p> <pre><code>{\n  \"alg\": \"RS256\",\n  \"enc\": \"RS256\",\n  \"typ\": \"JWT\"\n}\n</code></pre>"},{"location":"specification/#request","title":"Request","text":"<p>Requests are sent as HTTP GET requests to the Server:</p> <pre><code>GET /api/eligibility HTTP/1.1\nHost: verify.gov\nAuthorization: Bearer &lt;JWT&gt;\n</code></pre> <p>The URL endpoint is defined by the implementing Server. The Request JWT is sent as a Base64url-encoded Bearer token in the <code>Authorization</code> header. There is no Request Body and querystring parameters are undefined.</p> <p>Request JWT payload:</p> Field name Data type Notes <code>jti</code>* <code>UUID4</code> Unique identifier for this JWT <code>iss</code>* <code>string</code> Identifier for the issuer of the JWT (e.g. the Client) <code>iat</code>* <code>integer</code> The time at which the JWT was issued; expressed as Unix seconds <code>agency</code> <code>string</code> Identifier for the transit agency the JWT was issued on behalf of <code>eligibility</code> <code>string[]</code> An array of eligibility types to verify <code>sub</code>* <code>string</code> The subject of the JWT, expressed as the transit rider\u2019s ID (e.g. Driver\u2019s License number) <code>name</code> <code>string</code> The transit rider\u2019s last name <p>Request payload example:</p> <pre><code>{\n  \"jti\": \"0890cce7-25d3-425c-a81b-bc437c2e18a3\",\n  \"iss\": \"https://calitp.org\",\n  \"iat\": 1632893416,\n  \"agency\": \"ABC Transit Company\",\n  \"eligibility\": [\n    \"senior\"\n  ],\n  \"sub\": \"A1234567\",\n  \"name\": \"Garcia\"\n}\n</code></pre>"},{"location":"specification/#response","title":"Response","text":"<p>The response body contains the Base64url-encoded Response JWT:</p> <pre><code>HTTP/1.1 200 OK\nDate: Wed, 29 Sep 2021 05:30:17 GMT\nContent-Type: text/plain; charset=UTF-8\nContent-Length: 232\n\nJWT\n</code></pre> <p>Response JWT payload:</p> <p>The Server response is intentionally sparse, omitting all PII from the original Request.</p> Field name Data type Notes <code>jti</code>* <code>UUID4</code> The identifier from the Request JWT <code>iss</code>* <code>string</code> Identifier for the issuer of the JWT (e.g. the Server) <code>iat</code>* <code>integer</code> The time at which the JWT was issued; expressed as Unix seconds <code>eligibility</code> <code>string[]</code> An array of eligibility types that verify as <code>TRUE</code> for the Request <p>Response payload example:</p> <pre><code>{\n  \"jti\": \"0890cce7-25d3-425c-a81b-bc437c2e18a3\",\n  \"iss\": \"https://verify.gov\",\n  \"iat\": 1632893417,\n  \"eligibility\": [\n    \"senior\"\n  ]\n}\n</code></pre>"},{"location":"specification/#errors","title":"Errors","text":"<p>An error can occur if the Request does not contain appropriate data. Errors are returned as JWT payloads in the same way that regular Responses are returned, with a HTTP code 400.</p> <pre><code>HTTP/1.1 400 Bad Request\nDate: Wed, 29 Sep 2021 05:30:17 GMT\nContent-Type: text/plain; charset=UTF-8\nContent-Length: 232\n\nJWT\n</code></pre> <p>Error JWT payload:</p> Field name Data type Notes <code>jti</code>* <code>UUID4</code> The identifier from the Request JWT <code>iss</code>* <code>string</code> Identifier for the issuer of the JWT (e.g. the Server) <code>iat</code>* <code>integer</code> The time at which the JWT was issued; expressed as Unix seconds <code>error</code> <code>{string: string}</code> A dictionary mapping field name to error message"},{"location":"specification/#example-missing-value","title":"Example: missing value","text":"<p>Occurs when one or more fields are missing (either missing from the payload, or with a null/empty value).</p> <pre><code>{\n  \"jti\": \"0890cce7-25d3-425c-a81b-bc437c2e18a3\",\n  \"iss\": \"https://verify.gov\",\n  \"iat\": 1632893417,\n  \"error\": {\n    \"eligibility\": \"missing\"\n  }\n}\n</code></pre>"},{"location":"specification/#example-invalid-format","title":"Example: invalid format","text":"<p>Occurs when one or more fields contain data that is invalid according to the Server\u2019s interpretation.</p> <pre><code>{\n  \"jti\": \"0890cce7-25d3-425c-a81b-bc437c2e18a3\",\n  \"iss\": \"https://verify.gov\",\n  \"iat\": 1632893417,\n  \"error\": {\n    \"sub\": \"invalid\"\n  }\n}\n</code></pre>"},{"location":"specification/#eligibility-types","title":"Eligibility types","text":"<p>Naturally, the Client and Server must agree on values for the <code>eligibility</code> array. Typically the Server\u2019s definition(s) and type(s) will be agreed upon and used by the Client, as the server is responsible for determining eligibility of a given type.</p>"},{"location":"specification/examples/","title":"Example transactions","text":"<p>This page outlines example roundtrip HTTP transactions conforming to the Eligibility Verification API.</p>"},{"location":"specification/examples/#sample-server","title":"Sample server","text":"<p>For the following examples, assume a Server with a database like:</p> Driver\u2019s License Number Last Name Date of Birth A1234567 Garcia 1955-08-27 B2345678 Hernandez 1961-01-23 <p>Further, assume the Server validates the eligibility type <code>senior</code> for those individuals age 65 or older.</p>"},{"location":"specification/examples/#usage-of-jwt-in-examples","title":"Usage of JWT in examples","text":"<p>For the purposes of these examples, JWT signing will be done using the simpler, secret-based HMAC SHA-256 (HS256) signing algorithm. This is not appropriate for production as it does not carry the same guarantees as a public-key signing algorithm.</p>"},{"location":"specification/examples/#example-jwt-header","title":"Example JWT header","text":"<p>Although the header will indicate otherwise, for simplification the examples will not show encryption/decryption of the JWT.</p> <p>The JWT header (both Request and Response) for each of the following examples is:</p> <pre><code>{\n  \"alg\": \"HS256\",\n  \"enc\": \"RS256\",\n  \"typ\": \"JWT\"\n}\n</code></pre>"},{"location":"specification/examples/#test-encodingdecoding","title":"Test encoding/decoding","text":"<p>To test JWT encoding/decoding, use the Debugger tool on JWT.IO. Paste in an encoded key to get the decoded output. Or build decoded output to see the corresponding encoded key.</p> <p>This tool must not be used with real (PII) data.</p>"},{"location":"specification/examples/#examples","title":"Examples","text":""},{"location":"specification/examples/#1-eligible-senior","title":"1. Eligible senior","text":"<p>This JWT was issued at 2021/09/29 05:30:16 (UTC); the subject (Garcia) is 66 years old.</p>"},{"location":"specification/examples/#request-jwt-payload","title":"Request JWT payload","text":"<pre><code>{\n  \"jti\": \"0890cce7-25d3-425c-a81b-bc437c2e18a3\",\n  \"iss\": \"https://calitp.org\",\n  \"iat\": 1632893416,\n  \"agency\": \"ABC Transit Company\",\n  \"eligibility\": [\n    \"senior\"\n  ],\n  \"sub\": \"A1234567\",\n  \"name\": \"Garcia\"\n}\n</code></pre>"},{"location":"specification/examples/#http-request","title":"HTTP Request","text":"<p>The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following <code>Authorization</code> header:</p> <pre><code>GET /api/eligibility HTTP/1.1\nHost: verify.gov\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey\nJqdGkiOiIwODkwY2NlNy0yNWQzLTQyNWMtYTgxYi1iYzQzN2MyZTE4YTMiLCJpc3MiOiJodHRwczovL2\nNhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC\nJlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiQTEyMzQ1NjciLCJuYW1lIjoiR2FyY2lhIn0.sM\nVsPU4ByJNR9lADrjlZHeNi1NkBoPdXO50fnCFDDqM\n</code></pre>"},{"location":"specification/examples/#http-response","title":"HTTP Response","text":"<pre><code>HTTP/1.1 200 OK\nDate: Wed, 29 Sep 2021 05:30:17 GMT\nContent-Type: text/plain; charset=UTF-8\nContent-Length: 254\n\neyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiIwODkwY2NlNy0y\nNWQzLTQyNWMtYTgxYi1iYzQzN2MyZTE4YTMiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi\nOjE2MzI4OTM0MTcsImVsaWdpYmlsaXR5IjpbInNlbmlvciJdfQ.tos2vJOO6msv9tMDMT34f95aIRvYj\nsHRVUz5621fNlI\n</code></pre>"},{"location":"specification/examples/#response-jwt-payload","title":"Response JWT payload","text":"<p>Base64url-decoding the JWT in the response body yields the following payload:</p> <pre><code>{\n  \"jti\": \"0890cce7-25d3-425c-a81b-bc437c2e18a3\",\n  \"iss\": \"https://verify.gov\",\n  \"iat\": 1632893417,\n  \"eligibility\": [\n    \"senior\"\n  ]\n}\n</code></pre> <p>The presence of the value <code>\"senior\"</code> in the <code>eligibility</code> array indicates that the Request subject associated with this JWT (Garcia) has been verified for that eligibility.</p>"},{"location":"specification/examples/#2-ineligible-senior","title":"2. Ineligible senior","text":"<p>This JWT was issued at 2021/09/29 05:30:16 (UTC), meaning the subject (Hernandez) is 60 years old.</p>"},{"location":"specification/examples/#request-jwt-payload_1","title":"Request JWT payload","text":"<pre><code>{\n  \"jti\": \"b2bb29dc-6f6a-44a2-83cf-e298123bbbd2\",\n  \"iss\": \"https://calitp.org\",\n  \"iat\": 1632893416,\n  \"agency\": \"ABC Transit Company\",\n  \"eligibility\": [\n    \"senior\"\n  ],\n  \"sub\": \"B2345678\",\n  \"name\": \"Hernandez\"\n}\n</code></pre>"},{"location":"specification/examples/#http-request_1","title":"HTTP Request","text":"<p>The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following <code>Authorization</code> header:</p> <pre><code>GET /api/eligibility HTTP/1.1\nHost: verify.gov\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey\nJqdGkiOiJiMmJiMjlkYy02ZjZhLTQ0YTItODNjZi1lMjk4MTIzYmJiZDIiLCJpc3MiOiJodHRwczovL2\nNhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC\nJlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiQjIzNDU2NzgiLCJuYW1lIjoiSGVybmFuZGV6In\n0.iY58E7ZYQziQ8ZH7iGSwPGp9S1xbFm6JLXFK0D2E-0w\n</code></pre>"},{"location":"specification/examples/#http-response_1","title":"HTTP Response","text":"<pre><code>HTTP/1.1 200 OK\nDate: Wed, 29 Sep 2021 05:30:17 GMT\nContent-Type: text/plain; charset=UTF-8\nContent-Length: 243\n\neyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJiMmJiMjlkYy02\nZjZhLTQ0YTItODNjZi1lMjk4MTIzYmJiZDIiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi\nOjE2MzI4OTM0MTcsImVsaWdpYmlsaXR5IjpbXX0._hE8UJPYSmQ0q6xymx8UIVF8BrlZry-G82g9ssyP\ndO4\n</code></pre>"},{"location":"specification/examples/#response-jwt-payload_1","title":"Response JWT payload","text":"<p>Base64url-decoding the JWT in the response body yields the following payload:</p> <pre><code>{\n  \"jti\": \"b2bb29dc-6f6a-44a2-83cf-e298123bbbd2\",\n  \"iss\": \"https://verify.gov\",\n  \"iat\": 1632893417,\n  \"eligibility\": []\n}\n</code></pre> <p>The absence of a value in the <code>eligibility</code> array indicates that the Request subject associated with this JWT (Hernandez) has not been verified for any eligibility.</p>"},{"location":"specification/examples/#3-no-eligibility-data","title":"3. No eligibility data","text":"<p>No data on the subject (Smith) exists in the Server\u2019s database.</p>"},{"location":"specification/examples/#request-jwt-payload_2","title":"*Request JWT payload","text":"<pre><code>{\n  \"jti\": \"ef8e9805-bb1b-4f97-903b-6b9ab830d604\",\n  \"iss\": \"https://calitp.org\",\n  \"iat\": 1632893416,\n  \"agency\": \"ABC Transit Company\",\n  \"eligibility\": [\n    \"senior\"\n  ],\n  \"sub\": \"C3456789\",\n  \"name\": \"Smith\"\n}\n</code></pre>"},{"location":"specification/examples/#http-request_2","title":"HTTP Request","text":"<p>The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following <code>Authorization</code> header:</p> <pre><code>GET /api/eligibility HTTP/1.1\nHost: verify.gov\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey\nJqdGkiOiJlZjhlOTgwNS1iYjFiLTRmOTctOTAzYi02YjlhYjgzMGQ2MDQiLCJpc3MiOiJodHRwczovL2\nNhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC\nJlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiQzM0NTY3ODkiLCJuYW1lIjoiU21pdGgifQ.0xp\neyL3GRAQGrGfvreruTra7dbJpjQQ0zLiIqm4H7sE\n</code></pre>"},{"location":"specification/examples/#http-response_2","title":"HTTP Response","text":"<pre><code>HTTP/1.1 200 OK\nDate: Wed, 29 Sep 2021 05:30:17 GMT\nContent-Type: text/plain; charset=UTF-8\nContent-Length: 246\n\neyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJlZjhlOTgwNS1i\nYjFiLTRmOTctOTAzYi02YjlhYjgzMGQ2MDQiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi\nOjE2MzI4OTM0MTcsImVsaWdpYmlsaXR5IjpbXX0.LEITzkSGL4Y7uA30pRYxNG7XjDI0lSYtev5X7hNK\nGn4\n</code></pre>"},{"location":"specification/examples/#response-jwt-payload_2","title":"Response JWT payload","text":"<p>Base64url-decoding the JWT in the response body yields the following payload:</p> <pre><code>{\n  \"jti\": \"ef8e9805-bb1b-4f97-903b-6b9ab830d604\",\n  \"iss\": \"https://verify.gov\",\n  \"iat\": 1632893417,\n  \"eligibility\": []\n}\n</code></pre> <p>The absence of a value in the <code>eligibility</code> array indicates that the Request subject associated with this JWT (Smith) has not been verified for any eligibility.</p> <p>Note it is important to return an empty <code>eligibility</code> array rather than an error message or 4xx HTTP code here. This way there is no distinction between \u201cexists in the database\u201d and \u201cdoes not exist in the database\u201d.</p>"},{"location":"specification/examples/#4-missing-request-data","title":"4. Missing request data","text":"<p>The request lacks a <code>sub</code> property, which is required.</p>"},{"location":"specification/examples/#request-jwt-payload_3","title":"Request JWT payload","text":"<pre><code>{\n  \"jti\": \"b692fa7c-3dca-4d0d-90ba-e5415af48285\",\n  \"iss\": \"https://calitp.org\",\n  \"iat\": 1632893416,\n  \"agency\": \"ABC Transit Company\",\n  \"eligibility\": [\n    \"senior\"\n  ],\n  \"name\": \"Garcia\"\n}\n</code></pre>"},{"location":"specification/examples/#http-request_3","title":"HTTP Request","text":"<p>The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following <code>Authorization</code> header:</p> <pre><code>GET /api/eligibility HTTP/1.1\nHost: verify.gov\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey\nJqdGkiOiJiNjkyZmE3Yy0zZGNhLTRkMGQtOTBiYS1lNTQxNWFmNDgyODUiLCJpc3MiOiJodHRwczovL2\nNhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC\nJlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwibmFtZSI6IkdhcmNpYSJ9.EtnDvEHY1CjldnH-98dIMwdir\npxbNbuCg18R7uR8Gag\n</code></pre>"},{"location":"specification/examples/#http-response_3","title":"HTTP Response","text":"<pre><code>HTTP/1.1 400 Bad Request\nDate: Wed, 29 Sep 2021 05:30:17 GMT\nContent-Type: text/plain; charset=UTF-8\nContent-Length: 258\n\neyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJiNjkyZmE3Yy0z\nZGNhLTRkMGQtOTBiYS1lNTQxNWFmNDgyODUiLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi\nOjE2MzI4OTM0MTcsImVycm9yIjp7InN1YiI6Im1pc3NpbmcifX0.1Z53Z2PInyTSQRomcWhcC2Z3c_qL\nWoISH7eFv-_JJnE\n</code></pre>"},{"location":"specification/examples/#response-jwt-payload_3","title":"Response JWT payload","text":"<p>Base64url-decoding the JWT in the response body yields the following payload:</p> <pre><code>{\n  \"jti\": \"b692fa7c-3dca-4d0d-90ba-e5415af48285\",\n  \"iss\": \"https://verify.gov\",\n  \"iat\": 1632893417,\n  \"error\": {\n    \"sub\": \"missing\"\n  }\n}\n</code></pre> <p>The <code>error</code> message indicates that the Request subject associated with this JWT is missing.</p>"},{"location":"specification/examples/#5-invalid-request-data","title":"5. Invalid request data","text":"<p>The request\u2019s <code>sub</code> property is not in the correct format.</p>"},{"location":"specification/examples/#request-jwt-payload_4","title":"Request JWT payload","text":"<pre><code>{\n  \"jti\": \"d0dbacaf-e691-4ecc-a733-a42a904da607\",\n  \"iss\": \"https://calitp.org\",\n  \"iat\": 1632893416,\n  \"agency\": \"ABC Transit Company\",\n  \"eligibility\": [\n    \"senior\"\n  ],\n  \"sub\": \"12345678Z\",\n  \"name\": \"Garcia\"\n}\n</code></pre>"},{"location":"specification/examples/#http-request_4","title":"HTTP Request","text":"<p>The preceding header and payload result in the (signed, Base64url-encoded) JWT used in the following <code>Authorization</code> header:</p> <pre><code>GET /api/eligibility HTTP/1.1\nHost: verify.gov\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.ey\nJqdGkiOiJkMGRiYWNhZi1lNjkxLTRlY2MtYTczMy1hNDJhOTA0ZGE2MDciLCJpc3MiOiJodHRwczovL2\nNhbGl0cC5vcmciLCJpYXQiOjE2MzI4OTM0MTYsImFnZW5jeSI6IkFCQyBUcmFuc2l0IENvbXBhbnkiLC\nJlbGlnaWJpbGl0eSI6WyJzZW5pb3IiXSwic3ViIjoiMTIzNDU2NzhaIiwibmFtZSI6IkdhcmNpYSJ9.2\nw5JhbfIzOSdKWTOrP5CQdhWw9Vo8VunoASe4EVZOoI\n</code></pre>"},{"location":"specification/examples/#http-response_4","title":"HTTP Response","text":"<pre><code>HTTP/1.1 400 Bad Request\nDate: Wed, 29 Sep 2021 05:30:17 GMT\nContent-Type: text/plain; charset=UTF-8\nContent-Length: 258\n\neyJhbGciOiJIUzI1NiIsImVuYyI6IlJTMjU2IiwidHlwIjoiSldUIn0.eyJqdGkiOiJkMGRiYWNhZi1l\nNjkxLTRlY2MtYTczMy1hNDJhOTA0ZGE2MDciLCJpc3MiOiJodHRwczovL3ZlcmlmeS5nb3YiLCJpYXQi\nOjE2MzI4OTM0MTcsImVycm9yIjp7InN1YiI6ImludmFsaWQifX0.V_8VA7vWTzwibGE4mfyQ0zAwKhLV\nqKDYsl2M55z8rDc\n</code></pre>"},{"location":"specification/examples/#response-jwt-payload_4","title":"Response JWT payload","text":"<p>Base64url-decoding the JWT in the response body yields the following payload:</p> <pre><code>{\n  \"jti\": \"d0dbacaf-e691-4ecc-a733-a42a904da607\",\n  \"iss\": \"https://verify.gov\",\n  \"iat\": 1632893417,\n  \"error\": {\n    \"sub\": \"invalid\"\n  }\n}\n</code></pre> <p>The <code>error</code> message indicates that the Request subject associated with this JWT was invalid.</p>"},{"location":"specification/token-signing-encryption/","title":"Token signing and encryption","text":"<p>The Eligiblity Verification API makes use of Signed and Encrypted JSON Web Tokens (JWS, JWE, JWT) as a means of data transfer.</p> <p>A public/private keypair must be generated by each party (Client and Server). Example keys for the Client and Server are included for the test verification server and sample agencies.</p>"},{"location":"specification/token-signing-encryption/#generating-new-keypairs","title":"Generating new keypairs","text":"<p>Using a terminal like <code>bash</code>, and the <code>openssl</code> program:</p> <pre><code>openssl genrsa -out [file name].key 2048\n</code></pre>"},{"location":"specification/token-signing-encryption/#extract-the-public-key","title":"Extract the public key","text":"<pre><code>openssl rsa -in [private key created above].key -pubout &gt; [file name].pub\n</code></pre> <p>There are two new files:</p> <ul> <li><code>[file name].key</code>: private key in PEM format, needed by the Client only</li> <li><code>[file name].pub</code>: public key in PEM format, give to the Eligibility Verification server</li> </ul> <p>The Client also requires a public key from the Eligibility Verification server, so this process must be repeated to generate the Server\u2019s keypair.</p> <p>The Server\u2019s private key should not be shared.</p>"},{"location":"specification/token-signing-encryption/#format-for-config-file","title":"Format for config file","text":"<p>To get a single-line version of a PEM key, suitable for a JSON configuration file:</p> <pre><code>awk 'NF {sub(/\\r/, \"\"); printf \"%s\\\\n\",$0;}' &lt;your PEM file here&gt;\n</code></pre>"},{"location":"tests/","title":"Automated tests","text":""},{"location":"tests/#pytest","title":"Pytest","text":"<p>The tests done at a unit level are run via pytest.</p> <p>To run locally, start the Devcontainer and run:</p> <pre><code>cd tests\n./run.sh\n</code></pre> <p>The helper script:</p> <ol> <li>Runs the tests with <code>pytest</code></li> <li>Calculates test coverage with <code>coverage</code></li> <li>Generates a <code>coverage</code> report in HTML in a directory named <code>coverage</code>.</li> </ol> <p>The report files include a local <code>.gitignore</code> file, so the entire directory is hidden from source control.</p>"},{"location":"tests/#latest-coverage-report","title":"Latest coverage report","text":"<p>We also make the latest (from <code>dev</code>) coverage report available online here: Coverage report</p>"}]}